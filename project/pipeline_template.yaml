---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Step Functions Example'
Resources:
  # Step functions state machine
  StateMachineOnboardingInstall:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      DefinitionString: !Sub |
        {
          "StartAt": "Start Glue job",
          "States": {
            "Job Failed": {
              "Type": "Fail",
              "Error": "Failed",
              "Cause": "Job failed",
              "Comment": "Job failed"
            },
            "Succeed": {
              "Type": "Succeed",
              "Comment": "Successfully deployed the model onto an inference endpoint",
              "InputPath": "$",
              "OutputPath": "$"
            },
            "Start Glue job": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:us-east-1:029716400694:function:lambda_start_glue_job_v2",
              "Comment": "This task starts the Glue job which does data transformation",
              "InputPath": "$",
              "OutputPath": "$",
              "ResultPath": "$.GlueJobRunId",
              "TimeoutSeconds": 60,
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Wait for Glue job"
            },
            "Wait for Glue job": {
              "Type": "Wait",
              "Comment": "Wait for Glue job for an interval before checking the job status",
              "InputPath": "$",
              "OutputPath": "$",
              "SecondsPath": "$.GluePollInterval",
              "Next": "Get Glue job status"
            },
            "Get Glue job status": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:us-east-1:029716400694:function:lambda_check_glue_job_v2",
              "Comment": "Check Glue job status",
              "InputPath": "$",
              "OutputPath": "$",
              "ResultPath": "$.GlueJobRunState",
              "TimeoutSeconds": 60,
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Check Glue job status"
            },
            "Check Glue job status": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.GlueJobRunState",
                  "StringEquals": "Running",
                  "Next": "Wait for Glue job"
                },
                {
                  "Variable": "$.GlueJobRunState",
                  "StringEquals": "Failed",
                  "Next": "Job Failed"
                },
                {
                  "Variable": "$.GlueJobRunState",
                  "StringEquals": "Succeeded",
                  "Next": "Start training job"
                }
              ],
              "Comment": "Choose the next task based on GlueJobRunState",
              "InputPath": "$",
              "OutputPath": "$"
            },
            "Start training job": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:us-east-1:029716400694:function:lambda_start_training_job_v2",
              "Comment": "Start Sagemaker training job",
              "InputPath": "$",
              "OutputPath": "$",
              "ResultPath": "$.TrainingJobInfo",
              "TimeoutSeconds": 60,
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Wait for training job"
            },
            "Wait for training job": {
              "Type": "Wait",
              "Comment": "Wait for an interval before checking training job status",
              "InputPath": "$",
              "OutputPath": "$",
              "SecondsPath": "$.TrainingPollInterval",
              "Next": "Get training job status"
            },
            "Get training job status": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:us-east-1:029716400694:function:lambda_check_training_job_v2",
              "Comment": "Get training job status",
              "InputPath": "$",
              "OutputPath": "$",
              "ResultPath": "$.TrainingJobRunState",
              "TimeoutSeconds": 60,
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Check training job status"
            },
            "Check training job status": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.TrainingJobRunState",
                  "StringEquals": "Failed",
                  "Next": "Job Failed"
                },
                {
                  "Variable": "$.TrainingJobRunState",
                  "StringEquals": "Running",
                  "Next": "Wait for training job"
                },
                {
                  "Variable": "$.TrainingJobRunState",
                  "StringEquals": "Succeeded",
                  "Next": "Start model deployment"
                }
              ],
              "Comment": "Choose the next task based on training job status",
              "InputPath": "$",
              "OutputPath": "$"
            },
            "Start model deployment": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:us-east-1:029716400694:function:lambda_start_model_deployment_v2",
              "Comment": "Start to deploy the model to an inference endpoint",
              "InputPath": "$",
              "OutputPath": "$",
              "ResultPath": "$.EndpointInfo",
              "TimeoutSeconds": 60,
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Wait for model deployment"
            },
            "Wait for model deployment": {
              "Type": "Wait",
              "Comment": "Wait for deployment of the model onto an inference endpoint",
              "InputPath": "$",
              "OutputPath": "$",
              "SecondsPath": "$.DeploymentPollInterval",
              "Next": "Get model deployment status"
            },
            "Check deployment status": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.ModelDeploymentState",
                  "StringEquals": "Failed",
                  "Next": "Job Failed"
                },
                {
                  "Variable": "$.ModelDeploymentState",
                  "StringEquals": "Running",
                  "Next": "Wait for model deployment"
                },
                {
                  "Variable": "$.ModelDeploymentState",
                  "StringEquals": "Succeeded",
                  "Next": "Succeed"
                }
              ],
              "Comment": "Choose the next task based on the current model deployment status",
              "InputPath": "$",
              "OutputPath": "$"
            },
            "Get model deployment status": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:us-east-1:029716400694:function:lambda_check_model_deployment_v2",
              "Comment": "Get the status of model deployment",
              "InputPath": "$",
              "OutputPath": "$",
              "ResultPath": "$.ModelDeploymentState",
              "TimeoutSeconds": 60,
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Check deployment status"
            }
          }
        }
        
      RoleArn: !GetAtt 'RoleForStepStates.Arn'

  # Glue jobs
  GlueJobDataTransformation:
    Type: AWS::Glue::Job
    Properties:
      Command:
        Name: glueetl
        ScriptLocation: "s3://glue_job_scripts/glue_job.py"
      DefaultArguments:
        "--TARGET_BUCKET": "yifenghe2019"
      Name: "my_glue_job_name"
      Role: !GetAtt 'RoleForGlueJob.Arn'      
      
  # Lambda functions
  LambdaStartGlueJob:
    Type: 'AWS::Lambda::Function'
    Properties:
    - Code:
      - S3Bucket: "yifenghe2019"
        S3Key: "start_glue_job/lambda_code.zip"
      Role: !GetAtt 'RoleForLambdaFunction.Arn'
      Handler: "lambda_function.lambda_handler"
      Runtime: "python2.7",
      Timeout: 60,
      MemorySize: 128

  LambdaCheckGlueJob:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
      - S3Bucket: "yifenghe2019"
        S3Key: "check_glue_job/lambda_code.zip"
      Role: !GetAtt 'RoleForLambdaFunction.Arn'
      Handler: "lambda_function.lambda_handler"
      Runtime: "python2.7",
      Timeout: 60,
      MemorySize: 128

  LambdaStartTrainingJob:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
      - S3Bucket: "yifenghe2019"
        S3Key: "start_training_job/lambda_code.zip"
      Role: !GetAtt 'RoleForLambdaFunction.Arn'
      Handler: "lambda_function.lambda_handler"
      Runtime: "python2.7",
      Timeout: 60,
      MemorySize: 128

  LambdaStartModelDeployment:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
      - S3Bucket: "yifenghe2019"
        S3Key: "start_model_deployment/lambda_code.zip"
      Role: !GetAtt 'RoleForLambdaFunction.Arn'
      Handler: "lambda_function.lambda_handler"
      Runtime: "python2.7",
      Timeout: 60,
      MemorySize: 128
      
  LambdaCheckModelDeployment:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
      - S3Bucket: "yifenghe2019"
        S3Key: "check_model_deployment/lambda_code.zip"
      Role: !GetAtt 'RoleForLambdaFunction.Arn'
      Handler: "lambda_function.lambda_handler"
      Runtime: "python2.7",
      Timeout: 60,
      MemorySize: 128
      

  # IAM roles
  RoleForLambdaFunction:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'lambda.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: lambda
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 'lambda:InvokeFunction'
            ManagedPolicyArns:
            - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
            - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
           
  RoleForStepStates:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: !Sub 'states.${AWS::Region}.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: lambda
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 'lambda:InvokeFunction'
            Resource:
            - !GetAtt 'LambdaStartGlueJob.Arn'
            - !GetAtt 'LambdaCheckGlueJob.Arn'
            - !GetAtt 'LambdaStartTrainingJob.Arn'
            - !GetAtt 'LambdaCheckTrainingJob.Arn'
            - !GetAtt 'LambdaStartModelDeployment.Arn'
            - !GetAtt 'LambdaCheckMOdelDeployment.Arn'            

  RoleForGlue:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "glue.amazonaws.com"
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: lambda
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: '*'
            ManagedPolicyArns:
            - 'arn:aws:iam::aws:policy/AWSGlueServiceRole'
            - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'          